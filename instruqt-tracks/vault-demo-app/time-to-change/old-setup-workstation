#!/bin/sh -l

# Install helpful CLI tools
apk add curl jq groff mysql-client

# Install Vault
wget https://releases.hashicorp.com/vault/1.3.1/vault_1.3.1_linux_amd64.zip
unzip vault_1.3.1_linux_amd64.zip
mv vault /usr/bin

# Install Consul
wget https://releases.hashicorp.com/consul/1.6.2/consul_1.6.2_linux_amd64.zip
unzip consul_1.6.2_linux_amd64.zip
mv consul /usr/bin

# Install Kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x kubectl
mv kubectl /usr/bin

# Install shipyard and create environment
 curl https://shipyard.run/apply | /bin/bash -s github.com/hashicorp-demoapp/infrastructure//blueprint

 # Add env vars
echo "export KUBECONFIG=/root/.shipyard/config/k3s/kubeconfig.yaml" >> /root/.bashrc
echo "export VAULT_ADDR=http://localhost:18200" >> /root/.bashrc
echo "export VAULT_TOKEN=root" >> /root/.bashrc
echo "export CONSUL_HTTP_ADDR=http://localhost:18500" >> /root/.bashrc

# Login with the root token (which is set to root)
vault login root


###########
# Create Namespaces
###########

# TODO: Use a Vault Enterprise container
# TODO: vault namespace create dba
# TODO: export VAULT_NAMESPACE="dba"

###########
# User Policies
###########

tee dba-operator-policy.hcl <<EOF
path "kv/db/*" {
  capabilities = ["list", "read", "create", "update"]
}
EOF

tee operator-policy.hcl <<EOF
path "kv/api/*" {
  capabilities = ["list", "read", "create", "update"]
}
EOF

tee security-policy.hcl <<EOF
path "kv/db/*" {
  capabilities = ["read"]
}

path "kv/api/*" {
  capabilities = ["read"]
}
EOF

tee cc-storage-svc-devs-policy.hcl <<EOF
path "kv/db/cc-storage-db-creds" {
  capabilities = ["read"]
}

path "kv/api/cc-storage-svc-api-token" {
  capabilities = ["read"]
}
EOF

###########
# Service Policies
###########
tee web-svc-policy.hcl <<EOF
path "kv/db/cust-profile-db-creds" {
  capabilities = ["read"]
}

path "kv/db/cc-storage-db-creds" {
  capabilities = ["read"]
}
EOF

tee cc-storage-svc-policy.hcl <<EOF
path "kv/db/cc-storage-db-creds" {
  capabilities = ["read"]
}

path "kv/api/cc-storage-svc-api-token" {
  capabilities = ["read"]
}
EOF

###########
# Seed Secrets
###########

# Create the KV secrets engine for static secrets
vault secrets enable -path="kv" kv

# Seed a sample Customer Profile secret
vault kv put kv/db/mysql/cust-profile-db-creds username=$MYSQL_USER password=$MYSQL_BAD_PASS

# Seed a sample API secret
vault kv put kv/api/shopping-cart-svc-api-token token="c0mpr0m153d"

# Seed a sample Credit Card DB secret
vault kv put kv/db/mysql/cc-storage-db-creds username=$MYSQL_USER password=$MYSQL_BAD_PASS

# TODO: seed MySQL data

###########
# Configure Old Secrets for Migration
###########

# Set up the shared MySQL password that will be migrated into Vault
mkdir -p /share/mysql
tee /share/mysql/cust-profile-db-creds.txt <<EOF
username=$MYSQL_USER
password=$MYSQL_GOOD_PASS
EOF

mkdir -p /git/app-secrets
tee /git/app-secrets/cc-storage-db-creds.txt <<EOF
username=root
password=$MYSQL_ROOT_PASSWORD
EOF

exit 0
